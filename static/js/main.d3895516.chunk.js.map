{"version":3,"sources":["components/header/Header.tsx","components/pages/notification/Notification.tsx","utils/elo.tsx","utils/lib.tsx","components/pages/games/GamesAdd.tsx","components/avatar/Avatar.tsx","components/avatar/AvatarGroup.tsx","components/pages/games/GameCard.tsx","components/pages/games/GamesAddResultWho.tsx","components/pages/games/GameAddResultWhen.tsx","components/select/Select.tsx","components/pages/games/GameAddResultRanks.tsx","components/button/Button.tsx","components/iconButton/IconButton.tsx","components/dialog/Dialog.tsx","components/pages/games/DeleteResult.tsx","components/button/ButtonGroup.tsx","components/pages/games/GameAddResult.tsx","components/scoreChip/ScoreChip.tsx","components/pages/games/ResultCard.tsx","components/pages/games/DeleteGame.tsx","components/input/Input.tsx","components/pages/games/EditGame.tsx","components/lineChartResult/LineChartResult.tsx","components/pages/games/GameCompleteCard.tsx","components/pages/games/Games.tsx","components/pages/settings/About.tsx","components/menu/Menu.tsx","components/menu/MenuItem.tsx","components/menu/Separator.tsx","components/pages/settings/SettingsHeader.tsx","components/pages/settings/Settings.tsx","components/pages/players/PlayersHeader.tsx","components/pages/players/PlayerCard.tsx","components/pages/players/EditPlayer.tsx","components/pages/players/PlayerCompleteCard.tsx","components/pages/players/Players.tsx","App.tsx","index.tsx"],"names":["Header","props","className","onClick","setSettingsOpen","Settings","fontSize","setPlayersOpen","Group","Date","toLocaleDateString","Notification","useEffect","notification","open","setTimeout","setNotification","severity","text","getPlayerProfile","players","uuidPlayer","filter","player","uuid","getResult","results","resultUuid","result","getPlayerLabel","username","length","toUpperCase","calculateRanking","game","rankHistory","push","playersRank","map","playerUuid","score","deltaScore","lastEntry","playedCpt","sort","a","b","date","forEach","newEntry","generateNewEntry","algorithmSettings","p","nbRank","i","ranks","rankFilter","rank","currentPlayer","otherPlayers","index","getIndexInEntry","lastScoreCurrentPlayer","sumDeltaScore","params","k_factor","k_first","n","k","nb_played","elo_get_k_factor","n_first","otherPlayer","A","B","lastScoreOtherPlayer","win","expected","newScore","old","exp","elo","entry","findIndex","obj","toChartScore","scores","chartScore","entreyToChartScore","playerRank","Math","round","generateGameFromLoadedData","newData","gamename","algo","newResult","some","sortedRanks","calculatePresentPlayers","GamesAdd","newGame","setGames","concat","games","setCurrentGame","edit","addGame","Avatar","style","backgroundColor","color","label","AvatarGroup","children","slice","max","child","GameCard","active","undefined","playerProfile","GameAddResultWho","playerInResults","selectedPlayers","setSelectedPlayers","GameAddResultWhen","utils","DateFnsUtils","DateTimePicker","value","selectedDate","onChange","setSelectedDate","showTodayButton","format","Select","defaultValue","options","option","key","GameAddResultRanks","id","rowStyle","gridRow","gridColumn","event","el","target","handleChange","Button","disabled","type","startIcon","endIcon","IconButton","icon","Dialog","onClose","Close","title","content","actions","DeleteResult","setDeleteResultOpen","deleteResult","borderColor","ButtonGroup","GameAddResult","React","useState","currentStep","setCurrentStep","addResultOpen","item","deleteResultOpen","setAddResultOpen","Delete","NavigateBefore","validResult","sorted","addNotification","addResult","PostAdd","nextStep","NavigateNext","ScoreChip","deltaClass","EmojiEvents","ResultCard","toLocaleString","DeleteGame","setDeleteGameOpen","deleteGame","Input","EditGame","currentGame","setGame","setEditMode","handleChangeGame","e","Number","LineChartResult","stateLineDesign","opacity","width","lineDesign","setLineDesign","generateLineScorePlayer","historyEntry","playing","playerInfo","renderPlayersScore","data","uuidPresentPlayers","uuidOtherPlayers","indexOf","ResponsiveContainer","height","LineChart","margin","top","right","left","bottom","XAxis","dataKey","tick","axisLine","stroke","YAxis","yAxisId","domain","fill","Tooltip","propsTooltip","payload","Legend","verticalAlign","onMouseEnter","onMouseLeave","Line","strokeWidth","strokeOpacity","dot","flat","Brush","GameCompleteCard","editMode","deleteGameOpen","Edit","Object","assign","changeGameData","displayResults","Games","new_data","About","href","Provider","Node","formula","Menu","anchorEl","offsetTop","offsetLeft","MenuItem","Separator","SettingsHeader","openDataMenu","setOpenDataMenu","ref","useRef","current","display","accept","handlerLoadData","htmlFor","Publish","Storage","handlerSaveData","GetApp","handlerResetData","Favorite","window","GitHub","PlayersHeader","require","randomColor","newPlayer","setPlayers","setCurrentPlayer","addPlayer","PlayerCard","isSelected","EditPlayer","setPlayer","onChangeComplete","c","hex","disableAlpha","handleChangePlayer","PlayerCompleteCard","changePlayerData","Players","renderPlayersContent","App","settingsOpen","playersOpen","preventDefault","reader","FileReader","onload","JSON","parse","files","readAsText","localStorage","getItem","notificationProps","settingsProps","cookie","stringifiedData","stringify","setItem","FileSaver","blob","Blob","saveAs","removeItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3895516.chunk.js","sourcesContent":["import './Header.scss'\n\nimport EmojiEvents from '@material-ui/icons/EmojiEvents'\nimport React, { Component } from \"react\"\nimport { Settings, Group } from '@material-ui/icons';\n\nexport interface HeaderProps{\n  setSettingsOpen: React.Dispatch<React.SetStateAction<boolean>>,\n  setPlayersOpen: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nconst Header = (props: HeaderProps) => {\n  return (\n      <header>\n        <div>\n          <h1>Game Ranking</h1>\n        </div>\n        <div className='header-right'>\n          <div className='header-icon-button' onClick={() => props.setSettingsOpen(true)}><Settings fontSize='large'/></div>\n          <div className='header-icon-button'  onClick={() => props.setPlayersOpen(true)}><Group fontSize='large'/></div>\n          <div className='today-date'>{new Date().toLocaleDateString()}</div>\n        </div>\n      </header>\n    );\n}\n\nexport default Header","import React, { ChangeEvent, useEffect } from 'react';\n\nimport \"./Notification.scss\"\n\nimport { notificationType } from '../../../types/notification';\n\nexport interface NotificationProps{\n  notification: notificationType,\n  setNotification: any,\n}\n\nexport default function Notification(props: NotificationProps){  \n  const handleClose = (event: any, reason: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    props.setNotification({open: false});\n  };\n\n  useEffect(() => {\n    if(props.notification.open){\n      setTimeout(() => {\n        props.setNotification({open: false});\n      }, 3000);\n    }\n  }, [props.notification.open])\n\n  const severity = props.notification.severity ? props.notification.severity : \"info\"\n\n  return (\n    props.notification.open ?\n    <div className={`notification ${props.notification.open?'open':'close'}`}>\n      <div className={`notification-content ${severity}`}>\n        {props.notification.text}\n      </div>\n    </div>  : <></>\n  );\n}","export const elo_get_k_factor = (k_first: number, n:number, k: number, nb_played: number): number => {\n    if (nb_played < n)\n        return k_first\n    return k\n}\n\nexport const elo_expected = (A: number, B: number): number => {\n    return 1 / (1 + 10 ** ((B - A) / 400))\n}\n\nexport const elo = (old: number, exp: number, score: 0 | 1, k_factor: number, nbTeam:number=1): number => {\n    return old + k_factor * (score - exp) / nbTeam\n}","import { gameType, historyEntryType, playerType, resultType, scoreType,algorithmSettings } from \"../types/data\"\nimport { elo, elo_expected, elo_get_k_factor } from \"./elo\";\n\nexport const getPlayerProfile = (players: Array<playerType>, uuidPlayer: string): playerType => {\n    return (players.filter(player => (player.uuid === uuidPlayer))[0])\n}\n\nexport const getResult = (results: Array<resultType>, resultUuid: string): resultType => {\n    return (results.filter(result => (result.uuid === resultUuid))[0])\n}\n\nexport const getPlayerLabel = (player: playerType): string => {\n    if(player.username.length>1)\n        return player.username[0].toUpperCase()+player.username[1];\n    return player.username[0].toUpperCase();\n}\n\n\n\nexport const calculateRanking = (game: gameType): Array<historyEntryType> => {\n    if(!game.results)\n        return [];\n    let rankHistory: Array<historyEntryType>  = []\n    rankHistory.push({ resultUuid: \"\", playersRank: []})\n    rankHistory[0].playersRank = game.players.map(player => { return { playerUuid: player.uuid, score: 1200, deltaScore: 0 }}) \n    let lastEntry: historyEntryType = rankHistory[0]\n    const playedCpt = {}\n    game.results.sort((a,b) => a.date >= b.date ? 1 : -1).forEach(result => {\n        const newEntry = generateNewEntry(result, lastEntry, playedCpt, game.algorithmSettings)\n        rankHistory.push(newEntry);\n        lastEntry = newEntry\n    });\n    return rankHistory;\n}\n\nexport const generateNewEntry = (result: resultType, lastEntry: historyEntryType, playedCpt: Record<string, number>, algorithmSettings: algorithmSettings) => {\n    let newEntry: historyEntryType = {\n        resultUuid: result.uuid,\n        playersRank: []\n    };\n    lastEntry.playersRank.forEach(p => { newEntry.playersRank.push({ playerUuid: p.playerUuid, score: p.score, deltaScore: p.deltaScore})})\n    let nbRank: any = {}\n    for(let i=0; i<result.ranks.length; i++)\n        nbRank[i+1] = result.ranks.filter(rankFilter => (i+1 === rankFilter.rank)).length\n\n    result.ranks.forEach(currentPlayer => {\n        if (!playedCpt[currentPlayer.uuid])\n            playedCpt[currentPlayer.uuid] = 0\n        const otherPlayers = result.ranks.filter(rankFilter => (currentPlayer.rank !== rankFilter.rank))\n        const index = getIndexInEntry(currentPlayer.uuid,newEntry)\n        const lastScoreCurrentPlayer = lastEntry.playersRank[getIndexInEntry(currentPlayer.uuid,lastEntry)].score\n        let sumDeltaScore = 0\n        const { k_first, n_first, k } = algorithmSettings.params\n        const k_factor = elo_get_k_factor(k_first, n_first, k, playedCpt[currentPlayer.uuid])\n        otherPlayers.forEach(otherPlayer => { \n            const lastScoreOtherPlayer = lastEntry.playersRank[getIndexInEntry(otherPlayer.uuid,lastEntry)].score\n            const win = currentPlayer.rank < otherPlayer.rank ? 1 : 0;\n            const expected = elo_expected(lastScoreCurrentPlayer, lastScoreOtherPlayer)\n            // const divFactor = nbRank[currentPlayer.rank] * nbRank[otherPlayer.rank]\n            const newScore = elo(lastScoreCurrentPlayer, expected, win, k_factor)\n            sumDeltaScore += newScore - lastScoreCurrentPlayer\n        })\n        newEntry.playersRank[index].score = lastScoreCurrentPlayer + sumDeltaScore\n        newEntry.playersRank[index].deltaScore = sumDeltaScore\n        playedCpt[currentPlayer.uuid] += 1\n    });\n    return newEntry\n}\n\n\nexport const getIndexInEntry = (playerUuid: string, entry: historyEntryType): number => {\n    return entry.playersRank.findIndex((obj => obj.playerUuid === playerUuid));\n}\n\nexport const toChartScore = (scores: Array<historyEntryType>) => {\n    const chartScore: any = []\n    scores.forEach((score) => chartScore.push(entreyToChartScore(score)))\n    return chartScore\n}\n\nconst entreyToChartScore = (score: historyEntryType) => {\n    let obj:any={}\n    obj['resultUuid']=score.resultUuid\n    score.playersRank.forEach(playerRank => obj[playerRank.playerUuid]=Math.round(playerRank.score))\n    return obj\n}\n\nexport const generateGameFromLoadedData  = (game: { gamename: any; uuid: any; results: resultType[]; algorithmSettings: any }) => {\n  let newData: gameType = {\n    gamename: game.gamename,\n    uuid: game.uuid,\n    players: [],\n    results: [],\n    rankHistory: [],\n    algorithmSettings: game.algorithmSettings\n  }\n \n  if (!newData.algorithmSettings) {\n    newData.algorithmSettings = {\n        algo: 'elo',\n        params: {\n            k_first: 40,\n            n_first: 5,\n            k: 25,\n        }\n    }\n  }\n\n  game.results.forEach((result: resultType) => {\n    const newResult: resultType = result\n    newResult.date = new Date(newResult.date)\n    newData.results.push(newResult);\n    newResult.ranks.forEach(rank => {\n    if(newData.players)\n    {\n        if(!newData.players.some(player => player.uuid === rank.uuid))\n        newData.players?.push({uuid:rank.uuid,rank:0});\n    }\n    else\n      newData.players=[{uuid:rank.uuid,rank:0}];\n    });\n  })\n  \n  newData.rankHistory = calculateRanking(newData);\n\n  if(newData.players)\n  {\n      const sortedRanks = newData.players.sort((a, b) => a.rank > b.rank ? 1 : -1)\n      newData.players = sortedRanks;\n  }\n  return newData\n}\n\nexport const calculatePresentPlayers = (game: gameType): Array<scoreType> => {\n    const players: Array<scoreType> = []\n    game.results.forEach(result => {\n        result.ranks.forEach(rank => {\n        if(!players.some(player => player.uuid === rank.uuid))\n            players.push({uuid:rank.uuid,rank:0});\n        })\n    })\n    return players\n} \n\nexport const calculateNbPosition = (games: Array<gameType>, playerUuid: string, position: number) => {\n    let total = 0;\n    games.forEach(game => {\n        game.results.forEach(result => {\n            const resultRank = result.ranks.filter(rank => rank.uuid === playerUuid)\n            if(resultRank.length && resultRank[0].rank === position) total += 1\n        })\n    })\n    return total\n}","import React from 'react';\n\nimport Games from '@material-ui/icons/Games';\nimport { uuid } from 'uuidv4';\nimport { gameType } from '../../../types/data';\nimport Button from '../../button/Button';\n\nimport './GamesAdd.scss'\n\nexport interface GamesAddProps{\n  games: Array<gameType>,\n  setGames: React.Dispatch<React.SetStateAction<Array<gameType>>>,\n  setCurrentGame: React.Dispatch<React.SetStateAction<{game: gameType|undefined, edit: boolean}>>\n\n}\n\nexport default function GamesAdd(props: GamesAddProps){\n  const addGame = () => {\n    let newGame: gameType = \n    {   \n      uuid: uuid(),\n      gamename: \"New game\",\n      results: [],\n      players: [],\n      rankHistory: [],\n      algorithmSettings: {\n        algo: 'elo',\n        params: {\n          k_first: 40,\n          n_first: 5,\n          k: 25,\n        }\n      }\n    }\n    props.setGames([newGame].concat(props.games));\n    props.setCurrentGame({game: newGame, edit: true})\n  }\n\n\n  return (\n    <div className='game-card add-game' onClick={() => addGame()}>\n      <Games className='add-game-icon' />\n    </div>\n  );\n}","import './Avatar.scss'\n\nexport interface AvatarProps{\n    label: string,\n    color?: string\n}\n\nconst Avatar = (props: AvatarProps) => {\n    return (\n        <div className='avatar' style={{backgroundColor: props.color}}>\n            <div className='avatar-label'>{props.label}</div>\n        </div>\n    )\n}\n\nexport default Avatar","import \"./AvatarGroup.scss\"\n\nexport interface AvatarGroupProps {\n    max: number\n    children: React.ReactNode[]\n}\n\nconst AvatarGroup = (props: AvatarGroupProps) => {\n    return (\n        <div className='avatar-group'>\n            {props.children.slice(0,props.max).map((child,index) => {\n                return <div className='avatar-group-avatar' key={index}>{child}</div>\n            })}\n            {props.children.length > props.max && <div className='avatar-group-avatar-more'>+{props.children.length - props.max}</div>}\n        </div>\n    )\n}\n\nexport default AvatarGroup\n","import React from 'react';\n\nimport \"./GameCard.scss\"\n\nimport Card from '../../card/Card';\n\nimport { gameType, playerType } from '../../../types/data';\nimport { getPlayerLabel, getPlayerProfile } from '../../../utils/lib';\nimport Avatar from '../../avatar/Avatar';\nimport AvatarGroup from '../../avatar/AvatarGroup';\nimport GameCompleteCard from './GameCompleteCard';\n\nexport interface GameCardProps{\n    game: gameType,\n    players: playerType[],\n    changeGameData: (arg0: gameType, arg1: string) => void,\n    setCurrentGame: React.Dispatch<React.SetStateAction<{game: gameType|undefined, edit: boolean}>>\n    active: boolean\n}\n\nconst GameCard = (props: GameCardProps) => {\n    const renderPlayers = () => {\n        if (props.game.rankHistory.length === 0)\n            return <div></div>\n        return (<AvatarGroup max={3}>\n                {\n                    props.game.rankHistory[props.game.rankHistory.length-1].playersRank.sort((a, b) => a.score < b.score ? 1 : -1).map((player,index) => {\n                        const playerProfile = getPlayerProfile(props.players,player.playerUuid)\n                        return <Avatar label={getPlayerLabel(playerProfile)} color={playerProfile.color} key={index}/>\n                    })\n                }\n              </AvatarGroup>)\n    }\n\n    const handlerOnClick = () => {\n        if(props.active) {\n            props.setCurrentGame({game: undefined, edit: false})\n            return\n        }\n        props.setCurrentGame({game: props.game, edit: false})\n    }\n    return (\n    <>\n        <div className={`game-card ${props.active?'active':''}`} onClick={handlerOnClick}>\n            {!props.active && <>\n                <p>{props.game.gamename}</p>\n                <div className='game-card-stats'>\n                    {renderPlayers()}\n                </div>\n            </>}\n        </div>\n        <div className={`game-card-outside-name-container ${props.active?'active':''}`}>\n            <div className='game-card-outside-name'>{props.game.gamename}</div>\n        </div>\n    </>\n  );\n}\n\nexport default GameCard;","import React from 'react';\n\nimport { playerType, scoreType } from '../../../types/data';\n\nimport './GamesAddResultWho.scss';\nimport { getPlayerLabel } from '../../../utils/lib';\nimport Avatar from '../../avatar/Avatar';\n\nexport interface GameAddResultWhoProps{\n    players: Array<playerType>,\n    selectedPlayers: Array<scoreType>,\n    setSelectedPlayers: React.Dispatch<React.SetStateAction<Array<scoreType>>>\n}\n\nexport default function GameAddResultWho(props: GameAddResultWhoProps){\n\n  const playerInResults = (uuidPlayer: string) => {\n    return (props.selectedPlayers.filter(player => (player.uuid === uuidPlayer)).length !== 0)\n  }\n\n  const togglePlayer = (uuidPlayer: string) => {\n    if(playerInResults(uuidPlayer))\n      props.setSelectedPlayers(props.selectedPlayers.filter(player => player.uuid !== uuidPlayer));\n    else\n      props.setSelectedPlayers([...props.selectedPlayers,{uuid: uuidPlayer, rank: 1}]);\n  }\n   \n  const renderCheckboxPlayers = (players: Array<playerType>) => {\n    return players.map((player) => \n        <div className={`games-add-result-who-player ${playerInResults(player.uuid) ? 'selected' : ''}`} onClick={() => togglePlayer(player.uuid)}>\n            <Avatar color={player.color} label={getPlayerLabel(player)} />\n            <p>{player.username}</p>\n        </div>\n    );\n  }\n\n  return (\n    <div>\n      <p>Who was playing?</p>\n      <div className='games-add-result-who-players'>\n        {renderCheckboxPlayers(props.players)}\n      </div>\n    </div>);\n}","import React from 'react';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, DateTimePicker } from '@material-ui/pickers';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\n\nimport './GameAddResultWhen.scss';\n\nexport interface GameAddResultWhenProps{\n    selectedDate: Date,\n    setSelectedDate: React.Dispatch<React.SetStateAction<Date>>\n}\n\nexport default function GameAddResultWhen(props: GameAddResultWhenProps){\n  const handleDateChange = (date: MaterialUiPickersDate) => {\n    props.setSelectedDate(date as Date);\n  };\n\n  return (\n    <div className='game-add-result-when'>\n        <p>When?</p>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DateTimePicker\n              value={props.selectedDate}\n              onChange={handleDateChange}\n              showTodayButton\n              format=\"dd/MM/yyyy HH:mm\"\n            />\n        </MuiPickersUtilsProvider>\n    </div>);\n}","import React from \"react\";\n\nimport \"./Select.scss\";\n\nexport interface SelectProps {\n    label?: string\n    defaultValue: string | number\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void\n    options: { label: string, value: string}[]\n}\n\nexport default function Select(props: SelectProps) {\n    return (\n        <div className=\"select-container\">\n            {props.label && <label>{props.label}</label>}\n            <select defaultValue={props.defaultValue} onChange={props.onChange}>\n                {props.options.map((option, key) => <option key={key} value={option.value}>{option.label}</option>)}\n            </select>\n        </div>\n    )\n}","import React from 'react';\n\nimport \"./GameAddResultRanks.scss\";\n\nimport { playerType, scoreType } from '../../../types/data';\nimport { getPlayerProfile, getPlayerLabel } from '../../../utils/lib';\nimport Avatar from '../../avatar/Avatar';\nimport Select from '../../select/Select';\n\nexport interface GameAddResultRanksProps{\n    players: Array<playerType>\n    selectedPlayers: Array<scoreType>,\n    setSelectedPlayers: React.Dispatch<React.SetStateAction<Array<scoreType>>>\n}\n\nexport default function GameAddResultRanks(props: GameAddResultRanksProps){\n  const handleChange = (event: any,uuidPlayer: string) => {\n    let newData: Array<scoreType> = props.selectedPlayers;\n    newData.map((el: scoreType) => (el.uuid === uuidPlayer ? el.rank=event.target.value : el))   \n    props.setSelectedPlayers(newData);\n  };\n \n  const renderPlayerRank = (selectedPlayers: scoreType[]) => {\n    return selectedPlayers.map((player, id) =>\n    {\n      const rowStyle = {\n        gridRow: `${id+1}/${id+2}`,\n        gridColumn: '1/2',\n      }\n\n      return (<div key={player.uuid} className='game-add-result-ranks-player' style={rowStyle} >\n        <div><Avatar label={getPlayerLabel(getPlayerProfile(props.players, player.uuid))} color={getPlayerProfile(props.players, player.uuid).color}/></div>\n        <div>{getPlayerProfile(props.players, player.uuid).username}</div>\n        <div className='game-add-result-ranks-player-rank'>\n          <Select\n            onChange={(event) => handleChange(event, player.uuid)}\n            defaultValue={player.rank}\n            options={selectedPlayers.map((el, id) => ({value: `${id+1}`, label: `${id+1}`}))} \n          />\n      </div>\n      </div>)})\n  }\n\n  return (\n    <div>\n        <p>Ranks</p>\n        <div className='game-add-result-ranks-players'>\n          {renderPlayerRank(props.selectedPlayers)}\n        </div>\n    </div>);\n}\n","import \"./Button.scss\";\n\nexport interface ButtonProps{\n    text?: string,\n    onClick: (args?: any) => void,\n    disabled?: boolean,\n    color?: \"primary\" | \"secondary\" | \"default\",\n    variant?: \"text\" | \"outlined\" | \"contained\",\n    startIcon?: JSX.Element,\n    endIcon?: JSX.Element,\n    className?: string,\n    type?: \"button\" | \"submit\" | \"reset\" | undefined,\n    style?: React.CSSProperties\n}\n\nexport default function Button(props: ButtonProps){\n    return (\n        <button\n            className={`button ${props.className}`}\n            onClick={() => props.onClick()}\n            disabled={props.disabled}\n            type={props.type}\n            style={props.style}\n        >\n            {props.startIcon}\n            {props.text}\n            {props.endIcon}\n        </button>\n    );\n}","import \"./IconButton.scss\";\n\nexport interface IconButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    icon: JSX.Element;\n    className?: string;\n}\n\nconst IconButton = (props: IconButtonProps) => {\n    return (\n        <button\n            className={`icon-button ${props.className}`}\n            onClick={() => props.onClick()}\n            disabled={props.disabled}\n        >\n            {props.icon}\n        </button>\n    );\n}\n\nexport default IconButton;","import { Close } from \"@material-ui/icons\";\nimport IconButton from \"../iconButton/IconButton\";\nimport \"./Dialog.scss\"\n\nexport interface DialogProps{\n    open: boolean,\n    title: string,\n    content: JSX.Element,\n    actions?: JSX.Element[] | JSX.Element\n    onClose: () => void\n}\n\nconst Dialog = (props: DialogProps) => {\n    return (\n        <div className={`dialog ${props.open ? \"open\" : \"\"}`}>\n            <div className=\"dialog-content\">\n                <div className=\"dialog-header\">\n                    <IconButton onClick={props.onClose} icon={<Close />}/>\n                    <h3 className=\"dialog-title\">{props.title}</h3>\n                </div>\n                <div className=\"dialog-body\">\n                    {props.content}\n                </div>\n                {props.actions && <div className=\"dialog-actions\">\n                    {props.actions}\n                </div>}\n            </div>\n        </div>\n    );\n}\n\nexport default Dialog","import React from 'react';\nimport Button from '../../button/Button';\nimport Dialog from '../../dialog/Dialog';\n\nexport interface DeleteResultProps{\n  deleteResult: () => void,\n  setDeleteResultOpen: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport default function DeleteResult(props: DeleteResultProps){  \n    return (\n    <Dialog\n        open={true}\n        onClose={() => props.setDeleteResultOpen(false)}\n        title={'Delete this Result?'}\n        content={<p>This will delete this Result and all associated results</p>}\n        actions={[\n            <Button onClick={() => props.setDeleteResultOpen(false)} text='Cancel' />,\n            <Button onClick={() => props.deleteResult()} style={{color: \"#DD0505\", borderColor: \"#DD0505\"}} text='delete' />\n          ]\n        }\n    />\n  );\n}","import \"./ButtonGroup.scss\"\n\nexport interface ButtonGroupProps{\n    children: React.ReactNode[]\n}\n\nconst ButtonGroup = (props: ButtonGroupProps) => {\n    return (\n        <div className='button-group'>\n            {props.children}\n        </div>\n    );\n}\n\nexport default ButtonGroup;","import React from 'react';\n\nimport { gameType, playerType, scoreType, resultType } from '../../../types/data';\nimport { Delete, NavigateBefore, NavigateNext, PostAdd } from '@material-ui/icons';\nimport GameAddResultWho from './GamesAddResultWho';\nimport GameAddResultWhen from './GameAddResultWhen';\nimport GameAddResultRanks from './GameAddResultRanks';\nimport { severityType } from '../../../types/notification';\nimport { getPlayerProfile } from '../../../utils/lib';\nimport { uuid } from 'uuidv4';\nimport DeleteResult from './DeleteResult';\nimport Dialog from '../../dialog/Dialog';\nimport Button from '../../button/Button';\nimport ButtonGroup from '../../button/ButtonGroup';\n\nexport interface GameAddResultProps{\n    game: gameType,\n    players: Array<playerType>,\n    addResultOpen: {id:string|undefined, open:boolean},\n    setAddResultOpen: React.Dispatch<React.SetStateAction<{id: string|undefined, open: boolean}>>,\n    addNotification: (arg0: string, arg1: severityType) => void,\n    addResult: (result: resultType, id: string | undefined) => void,\n    deleteResult: (uuid: string) => void,\n}\n\nexport default function GameAddResult(props: GameAddResultProps){\n  const [currentStep, setCurrentStep] = React.useState(\"who\");\n  const [selectedDate, setSelectedDate] = React.useState(props.addResultOpen.id ? props.game.results.filter(item => item.uuid === props.addResultOpen.id)[0].date : new Date());\n  const [selectedPlayers, setSelectedPlayers] = React.useState(props.addResultOpen.id ? props.game.results.filter(item => item.uuid === props.addResultOpen.id)[0].ranks : [] as Array<scoreType>);\n  const [deleteResultOpen, setDeleteResultOpen] = React.useState(false);\n\n  const displayCurrentStep = () => {\n    if(currentStep === \"who\")\n      return (<GameAddResultWho players={props.players} setSelectedPlayers={setSelectedPlayers} selectedPlayers={selectedPlayers}/>);\n\n    if(currentStep === \"when\")\n      return (<GameAddResultWhen setSelectedDate={setSelectedDate} selectedDate={selectedDate}/>);\n\n    if(currentStep === \"ranks\")\n      return (<GameAddResultRanks players={props.players} setSelectedPlayers={setSelectedPlayers} selectedPlayers={selectedPlayers}/>);\n\n    return <p>ERROR</p>\n  }\n\n  const nextStep = () => {\n    if(currentStep === \"who\")\n    {\n      if(selectedPlayers.length < 2)\n        props.addNotification(\"Please select a least 2 players\",\"error\");\n      else\n      {\n        setCurrentStep(\"when\");\n        const sorted = selectedPlayers.sort((a, b) => getPlayerProfile(props.players,a.uuid).username > getPlayerProfile(props.players,b.uuid).username ? 1 : -1)\n        setSelectedPlayers(sorted);\n      }\n    }\n    else if(currentStep === \"when\")\n      setCurrentStep(\"ranks\");\n  }\n  const backStep = () => {\n    if(currentStep === \"when\")\n      setCurrentStep(\"who\");\n    else if(currentStep === \"ranks\")\n      setCurrentStep(\"when\");\n  }\n\n  const addResult = () => {\n    let rank: number = 0;\n    let validResult: boolean = false;\n    selectedPlayers.forEach(player => {\n      if(rank===0)\n        rank=player.rank;\n      if(rank!==player.rank)\n        validResult=true;\n    });\n    if(validResult){\n      const sorted = selectedPlayers.sort((a, b) => a.rank > b.rank ? 1 : -1)\n      setSelectedPlayers(sorted);\n      \n      const result: resultType = \n      {\n        date: selectedDate,\n        ranks: selectedPlayers,\n        uuid: uuid(),\n      }\n      if(props.addResultOpen.id)\n        props.addNotification(\"Result correctly edited\",\"success\");\n      else\n        props.addNotification(\"New result correctly added\",\"success\");\n\n      props.setAddResultOpen({id:undefined, open: false})\n      props.addResult(result,props.addResultOpen.id);\n    }\n    else\n      props.addNotification(\"Results need at least two different rank\",\"error\");\n  }\n\n  const deleteResult = () => {\n    setDeleteResultOpen(false)\n    props.setAddResultOpen({id:undefined, open:false})\n    props.deleteResult(props.addResultOpen.id!)\n  }\n\n  const renderActions = () => {\n    return (<ButtonGroup>\n      <Button onClick={() => props.setAddResultOpen({id:undefined, open:false})} text=\"Cancel\" />\n      {props.addResultOpen.id && <Button onClick={() => setDeleteResultOpen(true)} startIcon={<Delete/>} />}\n      <Button  disabled={currentStep === \"who\"} onClick={() => backStep()} startIcon={<NavigateBefore/>} /> \n      {/* autoFocus */}\n  \n      {currentStep === \"ranks\" ? \n          <Button onClick={() => addResult()} endIcon={<PostAdd/>} text=\"Send\" />\n          :\n          <Button onClick={() => nextStep()} startIcon={<NavigateNext/>} /> \n      }\n     </ButtonGroup>)\n  }\n  \n  const title = props.addResultOpen.id ? \"Edit result\" : \"Add result\";\n\n  return (\n    <><Dialog open={props.addResultOpen.open} title={title} content={displayCurrentStep()} actions={renderActions()} onClose={() => props.setAddResultOpen({id:undefined, open:false})} />\n      {deleteResultOpen && <DeleteResult setDeleteResultOpen={setDeleteResultOpen} deleteResult={deleteResult}/>}\n  </>\n  );\n}","import React from 'react';\nimport { EmojiEvents } from '@material-ui/icons';\n\nimport './ScoreChip.scss';\n\nexport interface ScoreChipProps{\n  rank: number\n  score: number\n  deltaScore: boolean\n}\n\nexport default function ScoreChip(props: ScoreChipProps){\n    const getRankBadge = (rank: number) => \n    {\n        if (props.deltaScore) return <></>\n        if(rank===1) \n            return <EmojiEvents className='first' fontSize='small' />\n        else if(rank===2)\n            return <EmojiEvents className='second' fontSize='small'/>\n        else if(rank===3)\n        return <EmojiEvents className='third' fontSize='small' />\n        return <></>\n    }\n\n    let text: string = `${Math.round(props.score)}`, deltaClass: string = \"\"\n    if(props.deltaScore){\n        text = props.score < 0 ? `${Math.round(props.score)}` : `+${Math.round(props.score)}`\n        deltaClass = props.score < 0 ? \"delta-negative\" : \"delta-positive\"\n    }\n    return <div className={`score-chip ${deltaClass}`}>{getRankBadge(props.rank)}{text}</div>\n}\n","import React from 'react';\n\nimport \"./ResultCard.scss\"\n\nimport { playerRankHistory, playerType, resultType } from '../../../types/data';\nimport { getPlayerLabel, getPlayerProfile } from '../../../utils/lib';\nimport ScoreChip from '../../scoreChip/ScoreChip';\nimport Card from '../../card/Card';\nimport Tooltip from '../../tooltip/Tooltip';\nimport Avatar from '../../avatar/Avatar';\n\nexport interface ResultCardProps{\n    result: resultType,\n    players: Array<playerType>,\n    setAddResultOpen: React.Dispatch<React.SetStateAction<{id: string|undefined, open: boolean}>>,\n    playersRank: Array<playerRankHistory>\n}\n\nconst ResultCard = (props: ResultCardProps) => {\n  const displayPlayersBadges = () => {\n    return (props.result.ranks.map((rank) => \n    {\n        const playerRank = props.playersRank.filter(player => player.playerUuid === rank.uuid)[0] \n        const title = `${getPlayerProfile(props.players, rank.uuid).username} - New score: ${Math.round(playerRank.score)}`\n\n        return <div className='result-card-player'>\n            {/* <Tooltip content={title}> */}\n            {/* <Badge\n                overlap=\"circle\"\n                style={{borderColor: \"rgba(0,0,0,0)\"}}\n                anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n                }}\n                badgeContent={<ScoreChip rank={rank.rank} score={playerRank.deltaScore} deltaScore={true}/>}\n            > */}\n              <ScoreChip rank={rank.rank} score={playerRank.deltaScore} deltaScore={true}/>\n              <Avatar label={getPlayerLabel(getPlayerProfile(props.players,rank.uuid))} color={getPlayerProfile(props.players,rank.uuid).color}/>\n              {/* </Badge> */}\n            {/* </Tooltip> */}\n            <div className='result-card-rank'>#{rank.rank}</div>\n\n        </div>\n    }\n    ));\n  }\n\n  return (\n    <div className='result-card' onClick={()=>props.setAddResultOpen({id: props.result.uuid, open:true})}>\n        <div className='result-card-players'>{displayPlayersBadges()}</div>\n        <p>{props.result.date.toLocaleString()}</p>\n    </div>\n  );\n}\n\nexport default ResultCard","import React, { ChangeEvent, VoidFunctionComponent } from 'react';\nimport Button from '../../button/Button';\nimport Dialog from '../../dialog/Dialog';\n\nexport interface DeleteGameProps{\n  deleteGame: () => void,\n  setDeleteGameOpen: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport default function DeleteGame(props: DeleteGameProps){  \n    return (\n    <Dialog\n        open={true}\n        onClose={() => props.setDeleteGameOpen(false)}\n        title={\"Delete this game?\"}\n        content={<p>This will delete this game and all associated results.</p>}\n        actions={\n          [\n            <Button onClick={() => props.setDeleteGameOpen(false)} text=\"Cancel\"/>,\n            <Button onClick={() => props.deleteGame()} style={{color: \"#DD0505\", borderColor: \"#DD0505\"}} text=\"Delete\" />\n          ]\n        }\n    />\n\n  );\n}","import React from \"react\"\n\nimport \"./Input.scss\"\n\nexport interface InputProps {\n    label?: string\n    type?: string\n    value: string | number\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport default function Input(props: InputProps) {\n    return (\n        <div className=\"input-container\">\n            {props.label && <label>{props.label}</label>}\n            <input\n                type={props.type}\n                value={props.value}\n                onChange={props.onChange}\n            />\n        </div>\n    )\n}","import React from 'react';\nimport { gameType } from '../../../types/data';\nimport Button from '../../button/Button';\nimport Dialog from '../../dialog/Dialog';\nimport Input from '../../input/Input';\nimport Select from '../../select/Select';\n\n\nexport interface EditGameProps{\n    handleChangeGame: (newGame: gameType) => void,\n    setEditMode: React.Dispatch<React.SetStateAction<boolean>>,\n    currentGame: gameType,\n}\n\nexport default function EditGame(props: EditGameProps){  \n    const [game, setGame] = React.useState(props.currentGame);\n \n    const renderDialogContent = () => {\n        return (\n            <div className='vertical-centered gap-10'>\n                <Input \n                  label=\"Game name\"\n                  value={game.gamename}\n                  onChange={(e) => setGame({...game, 'gamename': e.target.value })}\n                />\n                <Select\n                  label=\"Algorithm\"\n                  defaultValue={game.algorithmSettings.algo}\n                  onChange={() => {}}\n                  options={[{ value: 'elo', label: 'elo'}]}/>\n                <Input\n                  label=\"K factor for n first games\"\n                  type='number'\n                  value={game.algorithmSettings.params.k_first}\n                  onChange={(e) => setGame({...game, 'algorithmSettings': { ...game.algorithmSettings, 'params': { ...game.algorithmSettings.params, 'k_first': Number(e.target.value)} } })}\n                />\n                <Input\n                  label=\"N\"\n                  type='number'\n                  value={game.algorithmSettings.params.n_first}\n                  onChange={(e) => setGame({...game, 'algorithmSettings': { ...game.algorithmSettings, 'params': { ...game.algorithmSettings.params, 'n_first': Number(e.target.value)} } })}\n                />\n                <Input\n                  label=\"K factor after n first games\"\n                  type='number'\n                  value={game.algorithmSettings.params.k}\n                  onChange={(e) => setGame({...game, 'algorithmSettings': { ...game.algorithmSettings, 'params': { ...game.algorithmSettings.params, 'k': Number(e.target.value)} } })}\n                />\n            </div>\n          )\n    }\n\n    return (\n    <Dialog\n        open={true}\n        onClose={() => props.setEditMode(false)}\n        title=\"Change the game settings\"\n        actions={[\n          <Button onClick={() => props.setEditMode(false)} text=\"Cancel\" />,\n          <Button onClick={() => { props.handleChangeGame(game); props.setEditMode(false); } } style={{color: \"#0DF505\", borderColor: \"#0DF505\"}} text=\"Update\" />\n        ]} \n        content={renderDialogContent()}    \n    />)\n}","import \"./LineChartResult.scss\"\nimport { useState } from \"react\";\nimport { LineChart, XAxis, Legend, CartesianGrid, Tooltip, Line, ResponsiveContainer, YAxis, Brush } from \"recharts\";\nimport { gameType, historyEntryType, playerType, resultType, scoreType } from \"../../types/data\";\nimport { getPlayerLabel, getPlayerProfile, getResult, toChartScore } from \"../../utils/lib\";\nimport ScoreChip from \"../scoreChip/ScoreChip\";\nimport Avatar from \"../avatar/Avatar\";\nimport Tooltip1 from \"../tooltip/Tooltip\";  \n\nexport interface LineChartResultProps {\n  players: Array<playerType>,\n  game: gameType,\n}\n\nexport default function LineChartResult(props: LineChartResultProps){\n  const stateLineDesign = (players: Array<scoreType>, uuid: string) => {\n    let opacity: Record<string, number> = {}\n    let width: Record<string, number> = {}\n   \n    players.forEach((player) => {\n      if(uuid && player.uuid===uuid)\n      {\n        opacity[player.uuid] = 1\n        width[player.uuid] = 4\n      } else if(uuid) {\n        opacity[player.uuid] = 0.7\n        width[player.uuid] = 2\n      } else {\n        opacity[player.uuid] = 1\n        width[player.uuid] = 2\n      }\n    })\n    return { opacity: opacity, width: width }\n  }\n  const [lineDesign, setLineDesign] = useState(stateLineDesign(props.game.players, \"\"));\n\n  const generateLines = (players: Array<scoreType>) => {\n    return players.map((player) => {\n        return <Line key={player.uuid} type=\"natural\" strokeWidth={lineDesign.width[player.uuid]} strokeOpacity={lineDesign.opacity[player.uuid]} dataKey={player.uuid} stroke={getPlayerProfile(props.players,player.uuid).color} yAxisId={1} dot={false} />\n      })\n  }\n\n  const handleMouseEnter = (uuid: string) => {\n    setLineDesign(stateLineDesign(props.game.players, uuid))\n  };\n\n  const handleMouseLeave = () => {\n    setLineDesign(stateLineDesign(props.game.players, \"\"));\n  };\n\n\n  const renderLegend = () => {\n    return (\n      <div className=\"linechart-result-legend\">\n        {\n          props.game.rankHistory[props.game.rankHistory.length-1].playersRank.sort((a, b) => a.score < b.score ? 1 : -1).map((player,index) => {\n            const playerProfile = getPlayerProfile(props.players,player.playerUuid)\n                  return <div key={index} className={`linechart-result-legend-player rank-${index+1}`} onMouseEnter={() => handleMouseEnter(player.playerUuid)} onMouseLeave={() => handleMouseLeave()}>\n                      <ScoreChip rank={index+1} score={player.score} deltaScore={false} />\n                      <Avatar color={playerProfile.color} label={getPlayerLabel(playerProfile)} />\n                  </div>\n            })\n        }\n      </div>\n    );\n  }\n  const generateLineScorePlayer = (historyEntry: historyEntryType, playerUuid: string, playing: boolean) => {\n    const playerRank = historyEntry.playersRank.filter((player) => player.playerUuid === playerUuid)[0]\n    const playerInfo = getPlayerProfile(props.players, playerUuid)\n    if(playing)\n    {\n      const color = playerRank.deltaScore < 0 ? \"#FF2020\" : \"#10FFB0\" \n      const deltaScore = playerRank.deltaScore < 0 ? `${Math.round(playerRank.deltaScore)}` : `+${Math.round(playerRank.deltaScore)}`\n      return <>\n              <div className=\"linechart-tooltip-score player\" style={{backgroundColor: playerInfo.color, color: \"#FFFFFF\"}}>{playerInfo.username}</div>\n              <div className=\"linechart-tooltip-score score\">{Math.round(playerRank.score)}</div> \n              <div className=\"linechart-tooltip-score delta-score\" style={{color: color}}>({deltaScore})</div>\n            </>\n    }\n    else\n      return <>\n              <div className=\"linechart-tooltip-score player\" style={{borderColor: playerInfo.color, color: \"#FFFFFF\"}}>{playerInfo.username}</div>\n              <div className=\"linechart-tooltip-score score\">{Math.round(playerRank.score)}</div> \n              <div className=\"linechart-tooltip-score delta-score\"></div>\n            </>\n  }\n\n  const renderPlayersScore = (result: resultType, data: any) => {\n    const historyEntry = props.game.rankHistory.filter((entry) => entry.resultUuid === result.uuid)[0] as historyEntryType\n\n    const uuidPresentPlayers: Array<string> = []\n    const uuidOtherPlayers: Array<string> = []\n    result.ranks.forEach(rank => uuidPresentPlayers.push(rank.uuid))\n    props.game.players.filter((player) => uuidPresentPlayers.indexOf(player.uuid) <= -1).forEach((player) => uuidOtherPlayers.push(player.uuid))\n    const componentPresentPlayers = uuidPresentPlayers.map((player) => \n    {\n      return generateLineScorePlayer(historyEntry, player, true)\n    })\n    const componentOtherPlayers = uuidOtherPlayers.map((player) => \n    {\n      return generateLineScorePlayer(historyEntry, player, false)\n    })\n   \n    return [componentPresentPlayers,componentOtherPlayers]\n  }\n\n  const renderTooltip = (propsTooltip: any) => {\n    const { active, payload, label} = propsTooltip\n    if (active && payload && payload.length && label) {\n      return (\n        <div className=\"linechart-tooltip\">\n          <p>{label ? getResult(props.game.results,label).date.toLocaleString() : \"Start\"}</p>\n          <div className=\"linechart-tooltip-scores\">{renderPlayersScore(getResult(props.game.results, label), payload)}</div>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const brushStartIndex = props.game.rankHistory.length > 25 ? props.game.rankHistory.length - 25 : 0\n  const brushEndIndex = props.game.rankHistory.length - 1\n  \n  return (\n    props.game.rankHistory.length && props.game.players.length ? \n    <div style={{width:'100%'}}>\n    <ResponsiveContainer width=\"100%\" height={400}>\n    <LineChart\n      height={400}\n      data={toChartScore(props.game.rankHistory)}\n      margin={{ top: 20, right: 20, left: 20, bottom: 20 }}\n      >\n      <XAxis dataKey=\"resultUuid\" tick={false} axisLine={{ stroke: '#fefefe' }}/>\n      <YAxis yAxisId={1} domain={['dataMin - 50', 'dataMax + 50']} tick={{ fill: \"#fefefe\" }} axisLine={{ stroke: '#fefefe' }}/>\n      <Tooltip content={renderTooltip} />\n      <Legend verticalAlign=\"top\" content={renderLegend}/>\n      {/* <CartesianGrid stroke=\"#fdfdfd\" strokeDasharray=\"3 3\"/> */}\n      {generateLines(props.game.players).flat()}\n      <Brush height={30} stroke=\"#091011\" />\n    </LineChart></ResponsiveContainer></div> : <></>\n  );  \n}\n","import React from 'react';\n\nimport \"./GameCompleteCard.scss\"\n\nimport { gameType, playerType, resultType } from '../../../types/data'\nimport { Delete, Edit, NavigateBefore, PostAdd } from '@material-ui/icons'\nimport GameAddResult from './GameAddResult'\nimport { severityType } from '../../../types/notification'\nimport { calculatePresentPlayers, calculateRanking } from '../../../utils/lib'\nimport ResultCard from './ResultCard'\nimport DeleteGame from './DeleteGame'\nimport EditGame from './EditGame'\nimport LineChartResult from '../../lineChartResult/LineChartResult'\nimport Card from '../../card/Card';\nimport Button from '../../button/Button';\nimport ButtonGroup from '../../button/ButtonGroup';\nimport IconButton from '../../iconButton/IconButton';\n// import BarChartResult from '../../barChartResult/BarChartResult';\n\nexport interface GameCompleteCardProps{\n    game: gameType,\n    players: Array<playerType>,\n    changeGameData: (game: gameType, uuid: string) => void,\n    setCurrentGame: React.Dispatch<React.SetStateAction<{game: gameType|undefined, edit: boolean}>>,\n    addNotification: (arg0: string, arg1: severityType) => void,\n    deleteGame: (uuid: string) => void,\n    edit: boolean\n}\n\nexport default function GameCompleteCard(props: GameCompleteCardProps){\n  const [addResultOpen, setAddResultOpen] = React.useState({id: undefined as string|undefined, open:false})\n  const [editMode, setEditMode] = React.useState(props.edit)\n  const [deleteGameOpen, setDeleteGameOpen] = React.useState(false)\n\n  const handleChangeGame = (newGame: gameType) => {\n    let newData: gameType = Object.assign({}, newGame)\n    newData.rankHistory = calculateRanking(newData)\n\n    if(newData.players)\n    {\n        const sortedRanks = newData.players.sort((a, b) => a.rank > b.rank ? 1 : -1)\n        newData.players = sortedRanks\n    }\n\n    props.changeGameData(newData, props.game.uuid)\n    props.addNotification(\"Game correctly edited\",\"success\")\n  }\n\n  const deleteGame = () => {\n    props.addNotification(\"Game correctly deleted\",\"success\")\n    setDeleteGameOpen(false)\n    props.deleteGame(props.game.uuid)\n  }\n\n  const deleteResult = (id: string) => {\n    let newData: gameType = Object.assign({}, props.game)\n    newData.results = newData.results.filter(result => result.uuid !== id)\n    newData.players = calculatePresentPlayers(newData)\n    newData.rankHistory = calculateRanking(newData)\n\n    props.addNotification(\"Result correctly deleted\",\"success\")\n\n    props.changeGameData(newData, props.game.uuid)\n  }\n\n  const addResult = (newResult: resultType, id: string|undefined) => {\n    let newData: gameType = Object.assign({}, props.game)\n    if(!newData.results)\n        newData.results = []\n    else if(id)\n        newData.results = newData.results.filter(item => item.uuid !== id)\n    newData.results.push(newResult)\n    newData.players = calculatePresentPlayers(newData)\n    newData.rankHistory = calculateRanking(newData)\n\n    if(newData.players)\n    {\n        const sortedRanks = newData.players.sort((a, b) => a.rank > b.rank ? 1 : -1)\n        newData.players = sortedRanks\n    }\n\n    props.changeGameData(newData, props.game.uuid)\n  }\n\n  const displayResults = () => {\n    if (props.game.results){\n        return props.game.results.sort((a,b) => a.date < b.date ? 1 : -1).map(result => {\n            const playersRank = props.game.rankHistory.filter((entry) => entry.resultUuid === result.uuid)[0].playersRank\n            return <ResultCard result={result} players={props.players} setAddResultOpen={setAddResultOpen} playersRank={playersRank}></ResultCard>}\n        );\n    }\n  }\n\n  const handlerAddResult = () => {\n    if(props.players.length<2)\n        props.addNotification(\"You must add at least 2 players before\", \"error\")\n    else\n        setAddResultOpen({id: undefined, open:true})\n  }\n\n  return (\n    <>\n        <div className='game-complete-card-container'>\n            <div className='game-complete-card'>\n                <div className='game-complete-card-header'>\n                    <div className='game-complete-card-general-stats'>\n                        <div>{props.game.results.length} results</div>\n                        <div>{props.game.players.length} players</div>\n                        <div>algo: {props.game.algorithmSettings.algo}</div>\n                    </div>\n                    <div className='game-complete-card-general-gamename'>{props.game.gamename}</div>\n                    <div className='game-complete-card-general-actions'>\n                        <Button endIcon={<PostAdd/>}  onClick={() => handlerAddResult()} text='New result'/>\n                        <Button onClick={() => setEditMode(true)} endIcon={<Edit/>}/>\n                        <Button onClick={() => setDeleteGameOpen(true)} endIcon={<Delete/>} />\n                    </div>\n                </div>\n                {props.game.players && \n                    <div className='game-complete-card-stats'><LineChartResult players={props.players} game={props.game}/></div>\n                }\n                {/* <Grid item>\n                    <BarChartResult players={props.players} game={props.game}/>\n                </Grid> */}\n                {addResultOpen.open ? <GameAddResult game={props.game} players={props.players} addResultOpen={addResultOpen} setAddResultOpen={setAddResultOpen} addNotification={props.addNotification} addResult={addResult} deleteResult={deleteResult}></GameAddResult> : <></>}\n                \n            </div>\n        </div>\n        <div className='game-complete-card-results'>\n            {displayResults()}\n        </div>\n    {deleteGameOpen && <DeleteGame setDeleteGameOpen={setDeleteGameOpen} deleteGame={deleteGame}></DeleteGame>}\n    {editMode && <EditGame setEditMode={setEditMode} handleChangeGame={handleChangeGame} currentGame={props.game}></EditGame>}\n    </>\n  )\n}\n","import \"./Games.scss\"\n\nimport React, { useState } from 'react';\nimport GamesAdd from './GamesAdd';\nimport GameCard from './GameCard';\nimport { gameType, playerType } from '../../../types/data';\nimport GameCompleteCard from './GameCompleteCard';\nimport { severityType } from '../../../types/notification';\n\nexport interface GamesProps{\n    games: Array<gameType>,\n    players: Array<playerType>\n    setGames: React.Dispatch<React.SetStateAction<Array<gameType>>>,\n    addNotification: (arg0: string, arg1: severityType) => void,\n}\n\nexport default function Games(props: GamesProps){\n    const [currentGame, setCurrentGame] = useState({game: undefined, edit: false} as unknown as {game: gameType|undefined, edit: boolean});\n\n    const renderGameCards = (games: Array<gameType>) => {\n        return (games.map((game: gameType) => <GameCard game={game} changeGameData={changeGameData} setCurrentGame={setCurrentGame} players={props.players} active={currentGame.game===game} />))\n    };\n\n    const changeGameData = (game: gameType, uuid: string) => {\n        let new_data: Array<gameType> = props.games\n        new_data.map((el: gameType) => (el.uuid === uuid ? Object.assign(el, game) : el))   \n        props.setGames(new_data);\n    }\n\n    const deleteGame = (uuid: string) => {\n        let new_data: Array<gameType> = props.games.filter(item => item.uuid !== uuid);\n        setCurrentGame({game: undefined, edit: false});\n        props.setGames(new_data);\n        props.addNotification(\"Game correctly deleted\",\"success\");\n    }\n\n    return (\n        <div className=\"games-container\">\n            <div className='games'>\n                <GamesAdd games={props.games} setGames={props.setGames} setCurrentGame={setCurrentGame} />\n                {renderGameCards(props.games)}\n            </div>\n            {currentGame.game && <GameCompleteCard game={currentGame.game} edit={false} changeGameData={changeGameData} setCurrentGame={setCurrentGame} players={props.players} deleteGame={deleteGame} addNotification={props.addNotification}></GameCompleteCard>}\n        </div>\n    );\n}\n","import React from 'react';\n\nimport MathJax from 'react-mathjax'\n\nimport './About.scss';\n\nexport interface AboutProps{\n}\n\nexport default function About(props: AboutProps){\n    const eloExpected = `E_{A} = \\\\frac{1}{1+10^{(R_{B} - R_{A}) / 400}}, E_{B} = \\\\frac{1}{1+10^{(R_{A} - R_{B}) / 400}}`\n    const eloNewScore = `R'_{A} = R_{A} + K(S_{A} - E_{A}), R'_{B} = R_{B} + K(S_{B} - E_{B})`\n    const eloLegend = `E (expected), R (rank), K (factor = 32), S (score : 1=win, 0=loss)`\n    const eloExpectedTeam = `E_{P,o} = \\\\frac{1}{1+10^{(R_{o} - R_{P}) / 400}}`\n    const eloNewScoreTeam = `R'_{P} = R_{P} + \\\\sum_{i}{K(S_{A} - E_{P,i})},\\\\ i \\\\in opponents(P)`\n    return (\n        <div className='about'>\n            <h2>About...</h2>\n            <section>\n                <h3>the author</h3>\n                <p>Made with love by <a href='https://github.com/StephaneBranly' target=\"_blank\">@stephane_branly</a>.</p>\n            </section>\n            <section>\n                <h3>the project</h3>\n                <p>Project made for personal use first. But feel free to use it and to give feedback (positive or negative). You can add <a href='https://github.com/StephaneBranly/game-ranking/issues' target=\"_blank\">issues</a> if you want.</p>\n            </section>\n            <section>\n                <MathJax.Provider>\n                    <h3>the algorithm</h3>\n                    <p>Currently, the <a href=\"https://en.wikipedia.org/wiki/Elo_rating_system\" target=\"_blank\">ELO</a> algorithm is used.</p>\n                    <MathJax.Node formula={eloExpected} />\n                    <MathJax.Node formula={eloNewScore} />\n                    <MathJax.Node formula={eloLegend} />\n                    <p>It is adapted to work with more than 2 players and more than 2 teams.</p>\n                    <MathJax.Node formula={eloExpectedTeam} />\n                    <MathJax.Node formula={eloNewScoreTeam} />\n                    <p>If the project grows, new algorithms can be added and parameterized on the interface.</p>\n                </MathJax.Provider>\n            </section>\n       </div>\n  );\n}","import \"./Menu.scss\";\n\nexport interface MenuProps {\n    children: JSX.Element[]\n    open?: boolean\n    onClose?: () => void\n    anchorEl?: HTMLElement\n}\n\nexport default function Menu(props: MenuProps){\n    return (\n        <div\n            className={`menu ${props.open ? \"open\" : \"\"}`}\n            style={{top: props.anchorEl?.offsetTop, left: props.anchorEl?.offsetLeft}}\n            onMouseLeave={() => props.onClose && props.onClose()}    \n        >\n            {props.children}\n        </div>\n    );\n}","import \"./MenuItem.scss\";\n\nexport interface MenuItemProps {\n    text: string\n    onClick?: () => void\n    disabled?: boolean\n    icon?: JSX.Element\n    className?: string\n}\n\nexport default function MenuItem(props: MenuItemProps){\n    return (\n        <div className={`menu-item ${props.className}`} onClick={() =>  props.onClick && props.onClick()}>\n            {props.icon}\n            <span>{props.text}</span>\n        </div>\n    );\n}","import \"./Separator.scss\";\n\nexport interface SeparatorProps {\n    className?: string\n}\n\nexport default function Separator(props: SeparatorProps){\n    return (\n        <div className={`separator ${props.className}`}></div>\n    );\n}","import React from 'react';\nimport { Publish, GetApp, Storage, Delete, Favorite, GitHub } from '@material-ui/icons';\nimport ButtonGroup from '../../button/ButtonGroup';\nimport Button from '../../button/Button';\nimport Menu from '../../menu/Menu';\nimport MenuItem from '../../menu/MenuItem';\nimport Separator from '../../menu/Separator';\n\nexport interface SettingsHeaderProps{\n    handlerResetData: (cookie: boolean) => void,\n    handlerSaveData: (cookie: boolean) => void,\n    handlerLoadData: (e: React.ChangeEvent<HTMLInputElement> | null) => void,\n}\n\nexport default function SettingsHeader(props: SettingsHeaderProps){\n    const [openDataMenu, setOpenDataMenu] = React.useState(false)\n  \n    const handleClose = () => {\n      setOpenDataMenu(false)\n    }\n\n    const ref = React.useRef<HTMLDivElement>(null)\n\n    return (\n       <div className='settings-header'>\n            <Menu\n                open={openDataMenu}\n                onClose={handleClose}\n                anchorEl={ref.current?? undefined}\n              >\n                <input\n                  style={{ display: \"none\" }}\n                  accept=\".json\"\n                  id=\"contained-button-import\"\n                  type=\"file\"\n                  onChange={props.handlerLoadData}\n                />\n                <label htmlFor=\"contained-button-import\">\n                <MenuItem\n                  icon={<Publish fontSize=\"small\" />}\n                  text='Load from file'\n                />\n                </label>\n                <MenuItem\n                  onClick={() => props.handlerLoadData(null)}\n                  icon={<Storage fontSize=\"small\" />}\n                  text='Load from cookies'\n                />\n                <Separator />\n                <MenuItem\n                    onClick={() => props.handlerSaveData(false)}\n                    icon={<GetApp fontSize=\"small\" />}\n                    text='Save as file'\n                  />\n                <MenuItem\n                  onClick={() => props.handlerSaveData(true)}\n                  icon={<Storage fontSize=\"small\" />}\n                  text='Save as cookies'\n                />\n                <Separator />\n                <MenuItem\n                  onClick={() => props.handlerResetData(false)}\n                  icon={<Delete fontSize=\"small\" />}\n                  text='Delete current session'\n                />\n                <MenuItem\n                  onClick={() => props.handlerResetData(true)}\n                  icon={<Delete fontSize=\"small\" />}\n                  text='Delete cookies'\n                />\n            </Menu>\n            <ButtonGroup>\n              <Button \n                endIcon={<Favorite/>} \n                onClick={() => window.open(\"https://www.paypal.com/paypalme/StephaneBranly\", \"_blank\")}\n                text='Sponsor'\n              />\n              <Button \n                endIcon={<GitHub/>}\n                onClick={() => window.open(\"https://github.com/StephaneBranly/game-ranking\", \"_blank\")}\n                text='GitHub'\n              />\n              <div ref={ref}>\n                <Button\n                  startIcon={<Storage />}\n                  onClick={() => setOpenDataMenu(true)}\n                  text='Data'\n                  className='data-menu'\n                />\n              </div>\n            </ButtonGroup>\n          </div>\n  );\n}","import React from 'react';\nimport About from './About';\nimport SettingsHeader from './SettingsHeader';\n\n\nexport interface SettingsProps{\n  handlerResetData: (cookie: boolean) => void,\n  handlerSaveData: (cookie: boolean) => void,\n  handlerLoadData: (e: React.ChangeEvent<HTMLInputElement> | null) => void,\n}\n\nexport default function Settings(props: SettingsProps){  \n    return (\n    <div>\n      <SettingsHeader {...props}/>\n      <About/>\n    </div>\n  );\n}","import React from 'react';\n\nimport PersonAdd from '@material-ui/icons/PersonAdd';\nimport { uuid } from 'uuidv4';\nimport { playerType } from '../../../types/data';\nimport Button from '../../button/Button';\n\nexport interface PlayersHeaderProps{\n  players: Array<playerType>,\n  setPlayers:React.Dispatch<React.SetStateAction<Array<playerType>>>\n  setCurrentPlayer: React.Dispatch<React.SetStateAction<{player:playerType | undefined, edit: boolean}>>,\n}\n\nexport default function PlayersHeader(props: PlayersHeaderProps){\n  const addPlayer = () => {\n    var randomColor = require('randomcolor'); // import the script\n    var color = randomColor();\n    let newPlayer: playerType = \n    {   \n      uuid: uuid(),\n      username: \"New Player\",\n      color: color,\n    };    \n    props.setPlayers(props.players.concat(newPlayer));\n    props.setCurrentPlayer({player:newPlayer, edit:true})\n  }\n\n\n  return (\n    <div className='player-header'>\n        <Button\n          startIcon={<PersonAdd />}\n          onClick={() => addPlayer()}\n          text='Add a new player'\n        />\n    </div>\n  );\n}","import React from 'react';\n\nimport './PlayerCard.scss';\n\nimport { gameType, playerType } from '../../../types/data';\nimport { calculateNbPosition, getPlayerLabel } from '../../../utils/lib';\nimport Avatar from '../../avatar/Avatar';\n\n\nexport interface PlayerCardProps{\n    player: playerType,\n    games: Array<gameType>,\n    changePlayerData: (arg0: playerType, arg1: string) => void,\n    setCurrentPlayer: React.Dispatch<React.SetStateAction<{player:playerType | undefined, edit: boolean}>>,\n    isSelected: boolean\n}\n\nexport default function PlayerCard(props: PlayerCardProps){\n    return (\n        <div className={`player-card ${props.isSelected ? 'selected' : ''}`} onClick={() => props.setCurrentPlayer({player:props.player, edit:false})}>\n            <Avatar color={props.player.color} label={getPlayerLabel(props.player)} />\n            {/* <div className='player-card-content'>\n                <div className='player-card-content-username'>{props.player.username}</div>\n            </div> */}\n        </div>\n    )\n//   return (\n//     <Grid item spacing={1} onClick={() => props.setCurrentPlayer({player:props.player, edit:false})}>\n//         <Card className={classes.Padding}>\n//             <Grid\n//                 container\n//                 direction=\"row\"\n//                 justify=\"space-between\"\n//                 alignItems=\"baseline\"\n//             >\n//                 <Grid item>\n//                     <Grid\n//                         container\n//                         direction=\"row\"\n//                         justify=\"space-between\"\n//                         alignItems=\"baseline\"\n//                         spacing={1}\n//                     >\n//                         <Grid item><IconButton size=\"small\"><Person style={{color: props.player.color}}/></IconButton></Grid>\n//                         <Grid item>\n//                             <Typography>{props.player.username}</Typography>\n//                         </Grid>\n//                     </Grid>\n//                 </Grid>\n//                 <Grid item>\n//                     <Grid\n//                         container \n//                         item\n//                         direction=\"row\"\n//                         justify=\"space-between\"\n//                         alignItems=\"baseline\"\n//                         spacing={1}\n//                     >\n//                         <Grid item><Badge badgeContent={calculateNbPosition(props.games,props.player.uuid,1)} showZero className={classes.first} color=\"primary\"><EmojiEvents /></Badge></Grid>\n//                         <Grid item><Badge badgeContent={calculateNbPosition(props.games,props.player.uuid,2)} showZero className={classes.second} color=\"primary\"><EmojiEvents /></Badge></Grid>\n//                         <Grid item><Badge badgeContent={calculateNbPosition(props.games,props.player.uuid,3)} showZero className={classes.third} color=\"primary\"><EmojiEvents /></Badge></Grid>\n//                     </Grid>\n//                 </Grid>\n//             </Grid>\n//         </Card>\n//     </Grid>\n//   );\n}","import React from 'react';\n\nimport { playerType } from '../../../types/data';\nimport { ChromePicker } from 'react-color';\nimport Dialog from '../../dialog/Dialog';\nimport Button from '../../button/Button';\nimport Input from '../../input/Input';\n\nexport interface EditPlayerProps{\n    player: playerType\n    handleChangePlayer: (player: playerType) => void,\n    setEditMode: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport default function EditPlayer(props: EditPlayerProps){  \n    const [player, setPlayer] = React.useState(props.player);\n \n    const handleClose = () => {\n        props.setEditMode(false);\n    };\n\n    const renderDialogContent = () => {\n      return (<div className='vertical-centered gap-10'>\n          <Input label='Username' type='text' value={player.username} onChange={(e) => setPlayer({...player, username: e.target.value})} />\n          <ChromePicker color={player.color} onChangeComplete={(c) => setPlayer({...player, color: c.hex})} disableAlpha={true} className='color-picker' />\n          </div>)\n    }\n    return (\n      <Dialog\n          open={true}\n          onClose={handleClose} \n          title={'Edit player'} \n          content={renderDialogContent()}\n          actions={<>\n          <Button onClick={() => props.setEditMode(false)} text='Cancel'/>\n          <Button onClick={() => {props.handleChangePlayer(player); props.setEditMode(false);}} text='Update' style={{color: \"#0DF505\", borderColor: \"#0DF505\"}} />\n        </>}    />\n  );\n}\n\n","import React from 'react';\n\nimport \"./PlayerCompleteCard.scss\"\n\nimport { playerType } from '../../../types/data';\nimport { Edit } from '@material-ui/icons';\nimport { severityType } from '../../../types/notification';\nimport EditPlayer from './EditPlayer'\nimport Button from '../../button/Button';\n\nexport interface PlayerCompleteCardProps{\n    player: playerType,\n    changePlayerData: (player: playerType, uuid: string) => void,\n    setCurrentPlayer: React.Dispatch<React.SetStateAction<{player:playerType | undefined, edit: boolean}>>,\n    addNotification: (arg0: string, arg1: severityType) => void,\n    edit: boolean\n}\n\nexport default function PlayerCompleteCard(props: PlayerCompleteCardProps){\n  const [editMode, setEditMode] = React.useState(props.edit);\n \n  const handleChangePlayer = (player: playerType) => {\n    props.changePlayerData(player, player.uuid)\n  }\n\n  return (\n    <>\n        <div className='player-complete-card'>\n            <Button onClick={() => setEditMode(true)} startIcon={<Edit />} />\n            <p>\n                {props.player.username}\n            </p>\n        </div>\n        {editMode && <EditPlayer setEditMode={setEditMode} handleChangePlayer={handleChangePlayer} player={props.player}></EditPlayer>}\n    </>\n  );\n}","import React, { useState } from 'react';\n\nimport './Players.scss';\n\nimport PlayersHeader from './PlayersHeader'\nimport PlayerCard from './PlayerCard'\nimport { gameType, playerType } from '../../../types/data';\nimport { severityType } from '../../../types/notification';\nimport PlayerCompleteCard from './PlayerCompleteCard';\nimport Dialog from '../../dialog/Dialog';\n\nexport interface PlayersProps{\n  players: Array<playerType>,\n  games: Array<gameType>,\n  setPlayers:React.Dispatch<React.SetStateAction<Array<playerType>>>,\n  addNotification: (arg0: string, arg1: severityType) => void,\n  setPlayersOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport default function Players(props: PlayersProps){\n\n    const [currentPlayer, setCurrentPlayer] = useState({player:undefined, edit:false} as unknown as {player:playerType | undefined, edit: boolean});\n\n\n  \n    const renderPlayerCards = (players: Array<playerType>) => {\n        return (players.map((player: playerType) => <PlayerCard player={player} games={props.games} changePlayerData={changePlayerData} setCurrentPlayer={setCurrentPlayer} isSelected={currentPlayer.player === player}></PlayerCard>))\n    };\n\n    const changePlayerData = (player: playerType, uuid: string) => {\n      let new_data: Array<playerType> = props.players;\n      new_data.map((el: playerType) => (el.uuid === uuid ? Object.assign(el, player) : el))   \n      props.setPlayers(new_data);\n    }\n\n    const renderPlayersContent = () => {\n      return (\n        <div className='players'>\n          <PlayersHeader players={props.players} setPlayers={props.setPlayers} setCurrentPlayer={setCurrentPlayer}></PlayersHeader>\n          <div className='players-cards'>{renderPlayerCards(props.players)}</div>\n          {currentPlayer.player && <PlayerCompleteCard player={currentPlayer.player} edit={currentPlayer.edit} changePlayerData={changePlayerData} addNotification={props.addNotification} setCurrentPlayer={setCurrentPlayer} />}\n        </div>\n      )\n    }\n\n  return (\n    <Dialog open={true} title={'Players'} content={renderPlayersContent()} actions={<></>} onClose={() => props.setPlayersOpen(false)} />\n  );\n}","import React, { useEffect } from \"react\"\n\nimport \"./App.scss\"\n\nimport Header from \"./components/header/Header\"\nimport { dataType, gameType, playerType } from \"./types/data\"\nimport Notification, { NotificationProps } from \"./components/pages/notification/Notification\"\nimport { notificationType, severityType } from \"./types/notification\"\nimport { generateGameFromLoadedData } from \"./utils/lib\"\nimport Games from \"./components/pages/games/Games\"\nimport Settings, { SettingsProps } from \"./components/pages/settings/Settings\"\nimport Dialog from \"./components/dialog/Dialog\"\nimport Players from \"./components/pages/players/Players\"\n\nfunction App() {\n  const [players, setPlayers] = React.useState([]as Array<playerType>)\n  const [games, setGames] = React.useState([] as Array<gameType>)\n  const [notification, setNotification] = React.useState({ open: false } as notificationType)\n\n  const [settingsOpen, setSettingsOpen] = React.useState(false)\n  const [playersOpen, setPlayersOpen] = React.useState(false)\n\n  const getJsonSavedData = () => {\n    const data = {\n      players,\n      games: games.map(game => { return { uuid: game.uuid, gamename: game.gamename, results: game.results, algorithmSettings: game.algorithmSettings }})\n    }\n    return data\n  }\n\n  useEffect(() => {\n    handlerLoadData(null)\n  }, [])\n\n  const handlerSaveData = (cookie: boolean) => {\n    const stringifiedData = JSON.stringify(getJsonSavedData())\n\n    if(cookie)\n    {\n      try {\n        localStorage.setItem('data', stringifiedData)\n        addNotification('Data saved as cookies', \"success\")\n      } catch(e) {\n        addNotification('Error when saving as cookies', \"error\")\n      }\n    }\n    else {\n      const FileSaver = require(\"file-saver\")\n      const blob = new Blob([stringifiedData], { type: \"application/json\" })\n      FileSaver.saveAs(blob, \"save_game-ranking.json\")\n    }\n  }\n\n  const handlerLoadData = (e: React.ChangeEvent<HTMLInputElement> | null) => {\n    if(e){\n      try {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n          if (e.target?.result) {\n            const data = JSON.parse(e.target.result as string)\n            setPlayers(data.players)\n            const games: Array<gameType> = data.games.map((game: { uuid: any; gamename: any; results: any, algorithmSettings: any }) => generateGameFromLoadedData(game))\n            setGames(games)\n            addNotification(\"Data correctly loaded\", \"success\")\n          }\n        }\n        if (e.target?.files) {\n          reader.readAsText(e.target.files[0])\n        }\n      } catch {\n        addNotification(\"Error when loading data\", \"error\")\n      }\n    }\n    else{\n      if(localStorage.getItem('data'))\n      {\n        const data = JSON.parse(localStorage.getItem('data')!)\n        setPlayers(data.players)\n        const games: Array<gameType> = data.games.map((game: { uuid: any; gamename: any; results: any, algorithmSettings: any  }) => generateGameFromLoadedData(game))\n        setGames(games)\n        addNotification(\"Data correctly loaded\", \"success\")\n      }\n      else \n        addNotification(\"Data not found in cookies\", \"warning\")\n    }\n  }\n\n  const handlerResetData = (cookie: boolean) => {\n    if(cookie){\n      localStorage.removeItem('data')\n      addNotification(\"Cookie correctly removed\", \"success\")\n    } else {\n      setPlayers([])\n      setGames([])\n      addNotification(\"Current session correctly reinitiliazed\", \"success\")\n    }\n  }\n\n  const addNotification = (text: string, severity?: severityType) => {\n    const new_notification = {\n      open: true,\n      text,\n      severity: severity || undefined,\n    }\n    setNotification(new_notification)\n  }\n\n  const notificationProps: NotificationProps = {\n    notification,\n    setNotification,\n  }\n\n  const settingsProps: SettingsProps = {\n    handlerSaveData,\n    handlerLoadData,\n    handlerResetData,\n  }\n\n  return (\n    <div className=\"app\">\n      <Header setSettingsOpen={setSettingsOpen} setPlayersOpen={setPlayersOpen} />\n      <Games games={games} setGames={setGames} players={players} addNotification={addNotification}></Games>  \n      {playersOpen && <Players players={players} setPlayers={setPlayers} games={games} addNotification={addNotification} setPlayersOpen={setPlayersOpen} />}\n      <Notification {...notificationProps} />\n      <Dialog open={settingsOpen} title={'Settings'} content={<Settings {...settingsProps} />} onClose={() => setSettingsOpen(false)} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}